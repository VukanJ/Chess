#ifndef DATA_H
#define DATA_H

#include "misc.h"

constexpr U64  _right    = 0x0101010101010101ull,
              _left      = 0x8080808080808080ull,
              _col       = 0x101010101010101ull,
              _row       = 0xFFull,
              _noSides   = 0x7E7E7E7E7E7E7E7Eull,
              _sidesOnly = 0x8181818181818181ull,
              _msb       = 0x8000000000000000ull; // Most significant bit

class genChessData final
{
public:
	void genMoveData();
	void genMagic();
	void genMagicDatabases();
private:
	vector<U64> generateMagicBitboards(vector<vector<U64>>& vars, vector<vector<U64>>& correctAttacks, vector<U64>& masks); // brute force
	void genConnections();
	pair<vector<U64>,vector<U64>> genEffectiveAttacks(); // [rook, bishop]
	U64 floodFill(U64 propagator, U64 empty, int direction) const;
	vector<vector<U64>> genOccupancyVariations(vector<U64> occ);
	vector<U64> generateMagicShifts(vector<U64>& mask);
	vector<vector<U64>> genCorrectAttackSets(vector<vector<U64>>& vars, bool isrook);
};

struct MagicBit
{
	U64 *ptr, mask, magic;
	U8 shift;
};

extern vector<vector<U64>> CONNECTIONS;

extern vector<vector<U64>> magicRookMoveDatabase;
extern vector<vector<U64>> magicBishopMoveDatabase;

namespace {

	// Attack patterns

	const vector<U64> KNIGHT_ATTACKS = {
		0x20400, 0x50800, 0xa1100, 0x142200, 0x284400, 0x508800, 0xa01000, 0x402000,
		0x2040004, 0x5080008, 0xa110011, 0x14220022, 0x28440044, 0x50880088,
		0xa0100010, 0x40200020, 0x204000402, 0x508000805, 0xa1100110a, 0x1422002214,
		0x2844004428, 0x5088008850, 0xa0100010a0, 0x4020002040, 0x20400040200,
		0x50800080500, 0xa1100110a00, 0x142200221400, 0x284400442800, 0x508800885000,
		0xa0100010a000, 0x402000204000, 0x2040004020000, 0x5080008050000,
		0xa1100110a0000, 0x14220022140000, 0x28440044280000, 0x50880088500000,
		0xa0100010a00000, 0x40200020400000, 0x204000402000000, 0x508000805000000,
		0xa1100110a000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000,
		0xa0100010a0000000, 0x4020002040000000, 0x400040200000000, 0x800080500000000,
		0x1100110a00000000, 0x2200221400000000, 0x4400442800000000, 0x8800885000000000,
		0x100010a000000000, 0x2000204000000000, 0x4020000000000, 0x8050000000000,
		0x110a0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000,
		0x10a00000000000, 0x20400000000000
	};

	const vector<U64> ROOK_ATTACKS = {
		0x1010101010101fe,  0x2020202020202fd,  0x4040404040404fb,  0x8080808080808f7,
		0x10101010101010ef,  0x20202020202020df,  0x40404040404040bf,
		0x808080808080807f,  0x10101010101fe01,  0x20202020202fd02,
		0x40404040404fb04,  0x80808080808f708,  0x101010101010ef10,
		0x202020202020df20,  0x404040404040bf40,  0x8080808080807f80,
		0x101010101fe0101,  0x202020202fd0202,  0x404040404fb0404,  0x808080808f70808,
		0x1010101010ef1010,  0x2020202020df2020,  0x4040404040bf4040,
		0x80808080807f8080,  0x1010101fe010101,  0x2020202fd020202,
		0x4040404fb040404,  0x8080808f7080808,  0x10101010ef101010,
		0x20202020df202020,  0x40404040bf404040,  0x808080807f808080,
		0x10101fe01010101,  0x20202fd02020202,  0x40404fb04040404,  0x80808f708080808,
		0x101010ef10101010,  0x202020df20202020,  0x404040bf40404040,
		0x8080807f80808080,  0x101fe0101010101,  0x202fd0202020202,
		0x404fb0404040404,  0x808f70808080808,  0x1010ef1010101010,
		0x2020df2020202020,  0x4040bf4040404040,  0x80807f8080808080,
		0x1fe010101010101,  0x2fd020202020202,  0x4fb040404040404,  0x8f7080808080808,
		0x10ef101010101010,  0x20df202020202020,  0x40bf404040404040,
		0x807f808080808080,  0xfe01010101010101,  0xfd02020202020202,
		0xfb04040404040404,  0xf708080808080808,  0xef10101010101010,
		0xdf20202020202020,  0xbf40404040404040,  0x7f80808080808080
	};

	const vector<U64> BISHOP_ATTACKS = {
		0x8040201008040200, 0x80402010080500, 0x804020110a00, 0x8041221400,
		0x182442800, 0x10204885000, 0x102040810a000, 0x102040810204000,
		0x4020100804020002, 0x8040201008050005, 0x804020110a000a, 0x804122140014,
		0x18244280028, 0x1020488500050, 0x102040810a000a0, 0x204081020400040,
		0x2010080402000204, 0x4020100805000508, 0x804020110a000a11, 0x80412214001422,
		0x1824428002844, 0x102048850005088, 0x2040810a000a010, 0x408102040004020,
		0x1008040200020408, 0x2010080500050810, 0x4020110a000a1120, 0x8041221400142241,
		0x182442800284482, 0x204885000508804, 0x40810a000a01008, 0x810204000402010,
		0x804020002040810, 0x1008050005081020, 0x20110a000a112040, 0x4122140014224180,
		0x8244280028448201, 0x488500050880402, 0x810a000a0100804, 0x1020400040201008,
		0x402000204081020, 0x805000508102040, 0x110a000a11204080, 0x2214001422418000,
		0x4428002844820100, 0x8850005088040201, 0x10a000a010080402, 0x2040004020100804,
		0x200020408102040, 0x500050810204080, 0xa000a1120408000, 0x1400142241800000,
		0x2800284482010000, 0x5000508804020100, 0xa000a01008040201, 0x4000402010080402,
		0x2040810204080, 0x5081020408000, 0xa112040800000, 0x14224180000000,
		0x28448201000000, 0x50880402010000, 0xa0100804020100, 0x40201008040201
	};

	const vector<U64> QUEEN_ATTACKS = {
		0x81412111090503fe, 0x2824222120a07fd, 0x404844424150efb, 0x8080888492a1cf7,
		0x10101011925438ef, 0x2020212224a870df, 0x404142444850e0bf, 0x8182848890a0c07f,
		0x412111090503fe03, 0x824222120a07fd07, 0x4844424150efb0e, 0x80888492a1cf71c,
		0x101011925438ef38, 0x20212224a870df70, 0x4142444850e0bfe0, 0x82848890a0c07fc0,
		0x2111090503fe0305, 0x4222120a07fd070a, 0x844424150efb0e15, 0x888492a1cf71c2a,
		0x1011925438ef3854, 0x212224a870df70a8, 0x42444850e0bfe050, 0x848890a0c07fc0a0,
		0x11090503fe030509, 0x22120a07fd070a12, 0x4424150efb0e1524, 0x88492a1cf71c2a49,
		0x11925438ef385492, 0x2224a870df70a824, 0x444850e0bfe05048, 0x8890a0c07fc0a090,
		0x90503fe03050911, 0x120a07fd070a1222, 0x24150efb0e152444, 0x492a1cf71c2a4988,
		0x925438ef38549211, 0x24a870df70a82422, 0x4850e0bfe0504844, 0x90a0c07fc0a09088,
		0x503fe0305091121, 0xa07fd070a122242, 0x150efb0e15244484, 0x2a1cf71c2a498808,
		0x5438ef3854921110, 0xa870df70a8242221, 0x50e0bfe050484442, 0xa0c07fc0a0908884,
		0x3fe030509112141, 0x7fd070a12224282, 0xefb0e1524448404, 0x1cf71c2a49880808,
		0x38ef385492111010, 0x70df70a824222120, 0xe0bfe05048444241, 0xc07fc0a090888482,
		0xfe03050911214181, 0xfd070a1222428202, 0xfb0e152444840404, 0xf71c2a4988080808,
		0xef38549211101010, 0xdf70a82422212020, 0xbfe0504844424140, 0x7fc0a09088848281
	};

	const vector<U64> KING_ATTACKS = {
		0x302, 0x705, 0xe0a, 0x1c14, 0x3828, 0x7050, 0xe0a0, 0xc040, 0x30203, 0x70507,
		0xe0a0e, 0x1c141c, 0x382838, 0x705070, 0xe0a0e0, 0xc040c0, 0x3020300,
		0x7050700, 0xe0a0e00, 0x1c141c00, 0x38283800, 0x70507000, 0xe0a0e000,
		0xc040c000, 0x302030000, 0x705070000, 0xe0a0e0000, 0x1c141c0000, 0x3828380000,
		0x7050700000, 0xe0a0e00000, 0xc040c00000, 0x30203000000, 0x70507000000,
		0xe0a0e000000, 0x1c141c000000, 0x382838000000, 0x705070000000, 0xe0a0e0000000,
		0xc040c0000000, 0x3020300000000, 0x7050700000000, 0xe0a0e00000000,
		0x1c141c00000000, 0x38283800000000, 0x70507000000000, 0xe0a0e000000000,
		0xc040c000000000, 0x302030000000000, 0x705070000000000, 0xe0a0e0000000000,
		0x1c141c0000000000, 0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000,
		0xc040c00000000000, 0x203000000000000, 0x507000000000000, 0xa0e000000000000,
		0x141c000000000000, 0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000,
		0x40c0000000000000
	};

	// Magic Bitboards

	const vector<U64> rookAttackMasks = {
		0x101010101017e,  0x202020202027c,  0x404040404047a,  0x8080808080876,
		0x1010101010106e,  0x2020202020205e,  0x4040404040403e,  0x8080808080807e,
		0x1010101017e00,  0x2020202027c00,  0x4040404047a00,  0x8080808087600,
		0x10101010106e00,  0x20202020205e00,  0x40404040403e00,  0x80808080807e00,
		0x10101017e0100,  0x20202027c0200,  0x40404047a0400,  0x8080808760800,
		0x101010106e1000,  0x202020205e2000,  0x404040403e4000,  0x808080807e8000,
		0x101017e010100,  0x202027c020200,  0x404047a040400,  0x8080876080800,
		0x1010106e101000,  0x2020205e202000,  0x4040403e404000,  0x8080807e808000,
		0x1017e01010100,  0x2027c02020200,  0x4047a04040400,  0x8087608080800,
		0x10106e10101000,  0x20205e20202000,  0x40403e40404000,  0x80807e80808000,
		0x17e0101010100,  0x27c0202020200,  0x47a0404040400,  0x8760808080800,
		0x106e1010101000,  0x205e2020202000,  0x403e4040404000,  0x807e8080808000,
		0x7e010101010100,  0x7c020202020200,  0x7a040404040400,  0x76080808080800,
		0x6e101010101000,  0x5e202020202000,  0x3e404040404000,  0x7e808080808000,
		0x7e01010101010100,  0x7c02020202020200,  0x7a04040404040400,
		0x7608080808080800,  0x6e10101010101000,  0x5e20202020202000,
		0x3e40404040404000,  0x7e80808080808000
	};

	const vector<U64> bishopAttackMasks = {
		0x40201008040200,  0x402010080400,  0x4020100a00,  0x40221400,  0x2442800,
		0x204085000,  0x20408102000,  0x2040810204000,  0x20100804020000,
		0x40201008040000,  0x4020100a0000,  0x4022140000,  0x244280000,
		0x20408500000,  0x2040810200000,  0x4081020400000,  0x10080402000200,
		0x20100804000400,  0x4020100a000a00,  0x402214001400,  0x24428002800,
		0x2040850005000,  0x4081020002000,  0x8102040004000,  0x8040200020400,
		0x10080400040800,  0x20100a000a1000,  0x40221400142200,  0x2442800284400,
		0x4085000500800,  0x8102000201000,  0x10204000402000,  0x4020002040800,
		0x8040004081000,  0x100a000a102000,  0x22140014224000,  0x44280028440200,
		0x8500050080400,  0x10200020100800,  0x20400040201000,  0x2000204081000,
		0x4000408102000,  0xa000a10204000,  0x14001422400000,  0x28002844020000,
		0x50005008040200,  0x20002010080400,  0x40004020100800,  0x20408102000,
		0x40810204000,  0xa1020400000,  0x142240000000,  0x284402000000,
		0x500804020000,  0x201008040200,  0x402010080400,  0x2040810204000,
		0x4081020400000,  0xa102040000000,  0x14224000000000,  0x28440200000000,
		0x50080402000000,  0x20100804020000,  0x40201008040200
	};

	// Magic datasets

	const vector<U64> rookMagics = {
		0x1480004000201080,  0x40002000c81000,  0x2100084411002000,
		0x2880080050020480,  0x280080180040002,  0x420008a402001005,
		0x1080020020804100,  0x1000028d2820100,  0x4038800480204000,
		0x404400140201004,  0x800801001200080,  0x1004900100020,  0x68200220010380c,
		0x4100808004000200,  0x4002884010610,  0x801000200a04100,  0x280014004200042,
		0x800404008201004,  0x2201090020001041,  0x4000808068001001,
		0x108c018008000c80,  0x2010808002001c00,  0x41c0082010810,  0x1010e0001046184,
		0x400280048021,  0x1040400040201000,  0xd00400a0002802,  0xc0100080080080,
		0x18020140040040,  0x2010089000c0006,  0x40110009000a0004,  0x81000100009442,
		0x6000401680800020,  0x8081860302002040,  0x10802008801000,
		0x7000829000800800,  0x2008010111000804,  0x81600b002001408,
		0x50080104002a10,  0x4088306000044,  0x200400480008023,  0x9104002810022,
		0x820024c20010,  0x4080506042020008,  0x1a8480100150011,  0x80c0140002008080,
		0x104908040002,  0x2484008044020029,  0x4020204180010100,  0x20006080400080,
		0x2a01300080200980,  0x200080080500180,  0x1021014080100,  0x3016001004080600,
		0x8058802100400,  0x4881414400850200,  0x159028000462015,  0x1400400080210011,
		0x20010808a002042,  0x4110000820150111,  0x11000230040801,
		0x4281000e08040011,  0x1001880082100114,  0x8200240082c102
	};

	const vector<U64> bishopMagics = {
		0x8c431014048280,  0x2280301020002,  0xd044041086040008,  0x80a0420000040,
		0x22021000200001,  0x1004220840800100,  0x8002028220128840,  0x66004042101018,
		0x100046008010104,  0x810640802a520,  0x81a0800832a0200,  0x40808e1003000,
		0x102041044000120,  0x2080820105200100,  0x2889640404254414,
		0x8800089201100611,  0xe01000446028010c,  0x1004005810088200,
		0x1802100050c489,  0x46006420220004,  0x2040202020a0219,  0x900b020a01001,
		0x2008409450800,  0xa830204410808,  0x5508041008101000,  0x290108008290104,
		0x3400480c10006840,  0x4060080201034008,  0x100c0000802101,  0x1860103004200,
		0x501010102009028,  0x404200ac412428,  0x25004044832102a,  0x4100822120a40,
		0x40208808100020,  0x5002008010b0104,  0x9004010011040041,
		0x2502008100020240,  0x4c440480025800,  0x8034104024104,  0x4021142104432008,
		0x118050444d040,  0x2003009090080200,  0x408440201100080c,  0x240010a044100,
		0x552042802000024,  0x44c44518210c0202,  0x8024040090700200,
		0xc64404a0080100,  0x200210108a020b2,  0x100042d044100100,  0x2042020300,
		0x14201002020051,  0x4210881034082812,  0xb22044104a014081,
		0x9002088101120000,  0x200c410080a02020,  0x4102208248400,
		0xb100204042009000,  0x401003250841401,  0x70210a0480,  0x10022204031200,
		0x200a0801040410,  0x445600200420080
	};

	const vector<U64> rookMagicShifts = {
		52,53,53,53,53,53,53,52,
		53,54,54,54,54,54,54,53,
		53,54,54,54,54,54,54,53,
		53,54,54,54,54,54,54,53,
		53,54,54,54,54,54,54,53,
		53,54,54,54,54,54,54,53,
		53,54,54,54,54,54,54,53,
		52,53,53,53,53,53,53,52
	};

	const vector<U64> bishopMagicShifts = {
		58,59,59,59,59,59,59,58,
		59,59,59,59,59,59,59,59,
		59,59,57,57,57,57,59,59,
		59,59,57,55,55,57,59,59,
		59,59,57,55,55,57,59,59,
		59,59,57,57,57,57,59,59,
		59,59,59,59,59,59,59,59,
		58,59,59,59,59,59,59,58
	};

	const vector<U64> noWrap = {
		0xffffffffffffff00, // down
		0x7f7f7f7f7f7f7f7f, // left
		0x00ffffffffffffff, // up
		0xfefefefefefefefe, // right

		0x7f7f7f7f7f7f7f00, // down left
		0x007f7f7f7f7f7f7f, // up left
		0x00fefefefefefefe, // right up
		0xfefefefefefefe00  // right down
	};

	const vector<U64> standardPosition = {
		0xFF000000000000, 0x8100000000000000, 0x4200000000000000, 
		0x2400000000000000, 0x800000000000000, 0x1000000000000000,
		0xFF00, 0x81, 0x42, 0x24, 0x8, 0x10
	};

	const vector<vector<short>> pieceSquareTable =
	{
		// Pawns
		// Pawns are encouraged to move forward, and to reach the center
		// and the end of the board and to serve as a shield for the king
		{
		 0,   0,   0,   0,   0,   0,   0,   0,
		 300, 300, 300, 300, 300, 300, 300, 300,
		 10,  20,  30,  30,  30,  30,  20,  10,
		 5,   5,   11,  27,  27,  11,  5,   5,
		 0,   0,   0,   25,  25,  0,   0,   0,
		 5,  -5,  -10,  0,   0,  -10, -5,   5,
		 5,   10,  10, -15, -15,  10,  10,  5,
		 0,   0,   0,   0,   0,   0,   0,   0
		 },
		 // Knights
		 // Knights are penalized for going onto the edges of the board
		 // and encouraged to control the center
		 {
			-20, -8, -8, -8, -8, -8, -8, -20,
			-10,  0,  0,  0,  0,  0,  0, -10,
			-10,  0, 10, 15, 15, 10,  0, -10,
			-10,  0, 15, 20, 20, 15,  0, -10,
			-10,  0, 15, 20, 20, 15,  0, -10,
			-10,  0, 10, 15, 15, 10,  0, -10,
			-10,  0,  0,  0,  0,  0,  0, -10,
			-20, -20, -40, -30, -30, -40, -20, -20
		 },
		 // Bishops
		 // Bishops are encouraged to stay away from the edges and to control the center
		 {
			 -20, -8,  -8,  -8,  -8,  -8,  -8,  -20,
			 -10,  0,   0,   0,   0,   0,   0,  -10,
			 -10,  0,   5,   10,  10,  5,   0,  -10,
			 -10,  0,   5,   10,  10,  5,   0,  -10,
			 -10,  0,   10,  10,  10,  10,  0,  -10,
			 -10, 10,   10,  10,  10,  10,  10, -10,
			 -10,  0,    0,   0,   0,   0,   0, -10,
			 -20, -20, -40, -30, -30, -40, -20, -20
		 },
		 // Kings
		 // The king is encouraged to castle and to stay on the first and second rank
		 {
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-20, -30, -30, -40, -40, -30, -30, -20,
			-10, -20, -20, -20, -20, -20, -20, -10,
			 20,  20,   0,   0,   0,   0,  20,  20,
			 20,  30,  10,   0,   0,  10,  30,  20
		 },
		 // Endgame Kings
		 // In the endgame, kings need to stay away from the edges.
		 {
			 -50,-40,-30,-20,-20,-30,-40,-50,
			 -30,-20,-10,  0,  0,-10,-20,-30,
			 -30,-10, 20, 30, 30, 20,-10,-30,
			 -30,-10, 30, 40, 40, 30,-10,-30,
			 -30,-10, 30, 40, 40, 30,-10,-30,
			 -30,-10, 20, 30, 30, 20,-10,-30,
			 -30,-30,  0,  0,  0,  0,-30,-30,
			 -50,-30,-30,-30,-30,-30,-30,-50
		 }
	};

	const vector<vector<int>> captureScore = {
		//       p    r    n    b    k    q
		/* p */{ 104, 404, 204, 304, 0,   504 },
		/* r */{ 101, 401, 201, 301, 0,   501 },
		/* n */{ 103, 403, 203, 303, 0,   503 },
		/* b */{ 102, 402, 202, 302, 0,   502 },
		/* k */{ 0, 0, 0, 0, 0, 0 },
		/* q */{ 100, 400, 200, 300, 0,   500 }
	};

	const int shift[8] = { 8, -1, -8, 1, 7, -9, -7, 9 };
}

#endif
